version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: wedding_database
    restart: unless-stopped
    environment:
      POSTGRES_DB: wedding_app
      POSTGRES_USER: wedding_user
      POSTGRES_PASSWORD: wedding_password_2025
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - wedding_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wedding_user -d wedding_app"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend Service (Kotlin/Ktor)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: wedding_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=jdbc:postgresql://database:5432/wedding_app
      - DATABASE_USER=wedding_user
      - DATABASE_PASSWORD=wedding_password_2025
      - DATABASE_DRIVER=org.postgresql.Driver
      - DATABASE_MAX_POOL_SIZE=20
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME:-your_cloud_name}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY:-your_api_key}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET:-your_api_secret}
      - CORS_ALLOWED_HOSTS=http://localhost:3000,http://localhost:80,http://frontend:80
    ports:
      - "8080:8080"
    networks:
      - wedding_network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/access/codes"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - backend_logs:/app/logs

  # Frontend Service (Vue.js + Nginx)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wedding_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    ports:
      - "80:80"
      - "443:443"
    networks:
      - wedding_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - frontend_logs:/var/log/nginx

  # QR Code Generator Service
  qr-service:
    build:
      context: ./qr-service
      dockerfile: Dockerfile
    container_name: wedding_qr_service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_URL=http://backend:8080
      - FRONTEND_URL=http://localhost
    ports:
      - "3000:3000"
    networks:
      - wedding_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - qr_codes:/app/qr-codes
      - qr_logs:/app/logs

  # Nginx Reverse Proxy (optional, for production)
  nginx-proxy:
    image: nginx:alpine
    container_name: wedding_proxy
    restart: unless-stopped
    ports:
      - "8090:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    networks:
      - wedding_network
    depends_on:
      - frontend
      - backend
      - qr-service
    profiles:
      - production

  # Redis Cache (optional, for session management)
  redis:
    image: redis:7-alpine
    container_name: wedding_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass wedding_redis_2025
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - wedding_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # Backup Service (optional)
  backup:
    image: postgres:15-alpine
    container_name: wedding_backup
    restart: "no"
    environment:
      PGPASSWORD: wedding_password_2025
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - backup_data:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - wedding_network
    depends_on:
      database:
        condition: service_healthy
    entrypoint: ["/backup.sh"]
    profiles:
      - backup

# Networks
networks:
  wedding_network:
    driver: bridge
    name: wedding_network
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
    name: wedding_postgres_data
  qr_codes:
    driver: local
    name: wedding_qr_codes
  redis_data:
    driver: local
    name: wedding_redis_data
  backup_data:
    driver: local
    name: wedding_backup_data
  backend_logs:
    driver: local
    name: wedding_backend_logs
  frontend_logs:
    driver: local
    name: wedding_frontend_logs
  qr_logs:
    driver: local
    name: wedding_qr_logs
  nginx_logs:
    driver: local
    name: wedding_nginx_logs