version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: wedding-db
    environment:
      POSTGRES_DB: wedding_photos
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - postgres-data:/data/postgres
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d wedding_photos"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wedding-backend
    environment:
      PORT: 8080
      DATABASE_URL: jdbc:postgresql://postgres:5432/wedding_photos
      DB_USER: postgres
      DB_PASSWORD: postgres
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      STORAGE_BACKEND: ${STORAGE_BACKEND}
      # Set to 'cloudinary', 's3', or 'azure'
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      AWS_S3_SECRET_ACCESS_KEY: ${AWS_S3_SECRET_ACCESS_KEY}
      AZURE_STORAGE_CONNECTION_STRING: ${AZURE_STORAGE_CONNECTION_STRING}
      AZURE_STORAGE_CONTAINER_NAME: ${AZURE_STORAGE_CONTAINER_NAME}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wedding-network
    restart: unless-stopped

volumes:
  postgres-data:
    name: wedding-postgres-data

networks:
  wedding-network:
    name: wedding-network
    driver: bridge
